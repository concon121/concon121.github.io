<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-10-01T21:09:50+01:00</updated><id>http://localhost:4000/</id><title type="html">concon121@github</title><subtitle>Random musings on the things I get up to!</subtitle><entry><title type="html">atom-commit-templates</title><link href="http://localhost:4000/blog/2017/09/29/atom-commit-templates/" rel="alternate" type="text/html" title="atom-commit-templates" /><published>2017-09-29T00:46:00+01:00</published><updated>2017-09-29T00:46:00+01:00</updated><id>http://localhost:4000/blog/2017/09/29/atom-commit-templates</id><content type="html" xml:base="http://localhost:4000/blog/2017/09/29/atom-commit-templates/">&lt;p&gt;Easily set custom commit templates from the Atom UI&lt;/p&gt;

&lt;h2 id=&quot;setting-a-git-commit-template&quot;&gt;Setting a Git Commit Template&lt;/h2&gt;

&lt;p&gt;To enable your git commit template to take effect, this package writes to a &lt;code&gt;.gitcommit&lt;/code&gt; file in your home directory, and updates your git configuration to use this file as a commit template e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global commit.template ~/.gitcommit
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;keyboard-shortcuts&quot;&gt;Keyboard Shortcuts&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ctrl-shift-alt-t&lt;/code&gt; on Windows and Linux&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cmd-shift-alt-t&lt;/code&gt; on OSX&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Atom Commit Templates: Set Commit Template&lt;/code&gt; from the command palette&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;input-dialog&quot;&gt;Input Dialog&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/12021575/30941905-a8f31262-a3df-11e7-86e5-772338acb340.jpg&quot; alt=&quot;atom-commit-template&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;commit-message-automatically-populated&quot;&gt;Commit Message Automatically Populated&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/12021575/30941982-10b29774-a3e0-11e7-89eb-e0f36498a4f7.png&quot; alt=&quot;commit-message&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;goes-well-with&quot;&gt;Goes well with&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/git-plus&quot;&gt;Git Plus&lt;/a&gt; - Git commands without the terminal!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/git-control&quot;&gt;Git Control&lt;/a&gt; - A git GUI directly in Atom&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kudos&quot;&gt;Kudos&lt;/h2&gt;

&lt;p&gt;Kudos to the following, for making my life easier!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aki77/atom-input-dialog&quot;&gt;atom-input-dialog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="atom" /><category term="git" /><category term="javascript" /><category term="js" /><category term="node" /><category term="nodejs" /><category term="projects" /><summary type="html">Easily set custom commit templates from the Atom UI</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22atom-mark.png%22%7D" /></entry><entry><title type="html">Electron Designer</title><link href="http://localhost:4000/blog/2017/09/29/electron-designer/" rel="alternate" type="text/html" title="Electron Designer" /><published>2017-09-29T00:43:00+01:00</published><updated>2017-09-29T00:43:00+01:00</updated><id>http://localhost:4000/blog/2017/09/29/electron-designer</id><content type="html" xml:base="http://localhost:4000/blog/2017/09/29/electron-designer/">&lt;p&gt;Electron Designer is a simple demo &lt;a href=&quot;https://electron.atom.io/&quot;&gt;Electron&lt;/a&gt; application which allows you to build up a web page based on a limited set of &lt;a href=&quot;https://github.com/janl/mustache.js&quot;&gt;Mustache.js&lt;/a&gt; templates, acting as a means to view different combinations of your partial templates while you develop them.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Please ensure that you have these installed on your system before you begin.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;nodejs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;starting-up&quot;&gt;Starting Up&lt;/h2&gt;

&lt;p&gt;Install the project dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g jsttojs
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start the application:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pre-compile mustache templates:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jsttojs . views/compiled_views.js --ext mustache
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add the &lt;code&gt;--watch&lt;/code&gt; flag to the jsttojs command to constantly compile the templates as you change them.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&quot;the-template-toolbar&quot;&gt;The Template Toolbar&lt;/h3&gt;

&lt;p&gt;The template toolbar provides an ordered and categorised list of all the available templates that you can view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/concon121/electron-designer/master/images/template-toolbar.PNG&quot; alt=&quot;template-toolbar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking any of the options in the template toolbar will put the default template for that option on the screen, ready for you to start editing.&lt;/p&gt;

&lt;p&gt;The template toolbar goes down the left hand side of the screen.&lt;/p&gt;

&lt;h3 id=&quot;the-action-toolbar&quot;&gt;The Action Toolbar&lt;/h3&gt;

&lt;p&gt;The action toolbar gives you the ability to interact with the controls and form elements that you put on the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/concon121/electron-designer/master/images/action-toolbar.PNG&quot; alt=&quot;action-toolbar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From left to right:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Edit&lt;/strong&gt; - Click on the control you want to edit.  When the background colour has turned light grey, click the pencil icon in the toolbar at the top of the page.  An overlay will appear with some input field for you to enter the new content.  While the overlay is active, clicking the pencil icon again or the exit task button will close the overlay without saving any changes.  Clicking the save progress button will persist any changes you make and you will see them reflected on the screen.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Delete&lt;/strong&gt; - Click on the control you want to delete.  When the background colour has turned light grey, click the trash icon in the toolbar at the top of the page.  The selected control will disappear from the screen.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Select All&lt;/strong&gt; - If you click the check button in the action toolbar at the top of the page then all controls currently on the page will be selected.  Click it again and everything will be de-selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The action toolbar goes along the top of the screen.&lt;/p&gt;

&lt;h3 id=&quot;misc&quot;&gt;Misc&lt;/h3&gt;

&lt;h4 id=&quot;selecting-controls&quot;&gt;Selecting Controls&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/concon121/electron-designer/master/images/selecting.PNG&quot; alt=&quot;selecting-controls&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;select-all&quot;&gt;Select All&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/concon121/electron-designer/master/images/images/select-all.PNG&quot; alt=&quot;select-all&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;editing-controls&quot;&gt;Editing Controls&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/concon121/electron-designer/master/images/editing.PNG&quot; alt=&quot;editing&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="electron" /><category term="javascript" /><category term="js" /><category term="node" /><category term="nodejs" /><category term="projects" /><summary type="html">Experimenting in the ways of the Electron!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22electron.jpg%22%7D" /></entry><entry><title type="html">node-maven-api</title><link href="http://localhost:4000/blog/2017/09/29/node-maven-api/" rel="alternate" type="text/html" title="node-maven-api" /><published>2017-09-29T00:26:00+01:00</published><updated>2017-09-29T00:26:00+01:00</updated><id>http://localhost:4000/blog/2017/09/29/node-maven-api</id><content type="html" xml:base="http://localhost:4000/blog/2017/09/29/node-maven-api/">&lt;p&gt;Run maven commands via a Node JS API!&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To create the maven handler, you need to call the create method providing the path to the POM file to be handled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var mvn = require('node-maven-api').create('/workspace/project/pom.xml');

mvn.clean();
mvn.install();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;clean&quot;&gt;Clean&lt;/h3&gt;

&lt;p&gt;Invoke a maven clean on your project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn.clean();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;

&lt;p&gt;Invoke a maven install on your project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn.install();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;test&quot;&gt;Test&lt;/h3&gt;

&lt;p&gt;Invoke a maven test on your project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn.test();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;effective-pom&quot;&gt;Effective POM&lt;/h3&gt;

&lt;p&gt;Get the effective pom for your project.  A promise will be returned which will be resolved to a javascript object which represents the xml effective pom.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var promise = mvn.effectivePom();

promise.then((result) =&amp;gt; {
    console.log('Effective POM is: ', result);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;custom-commands&quot;&gt;Custom Commands&lt;/h3&gt;

&lt;p&gt;The API provided by this module can not possibly cover every maven goal, there is far too many!  You can run any command you need with the execCommand function.&lt;/p&gt;

&lt;p&gt;Function Parameters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The event name for your command.&lt;/li&gt;
  &lt;li&gt;The command to execute.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;// mvn clean install -f /path/to/my/pom.xml
mvn.execCommand('my-custom-event', 'clean install');
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;

&lt;p&gt;Sometimes you might want to perform some action after you have executed a maven command.  Upon completion of a process, the api will trigger an event via the Node JS EventEmitter.&lt;/p&gt;

&lt;p&gt;For the methods which this api exposes, the event names are as you may expect:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;clean&lt;/li&gt;
  &lt;li&gt;clean-failed&lt;/li&gt;
  &lt;li&gt;install&lt;/li&gt;
  &lt;li&gt;install-failed&lt;/li&gt;
  &lt;li&gt;test&lt;/li&gt;
  &lt;li&gt;test-failed&lt;/li&gt;
  &lt;li&gt;effective-pom&lt;/li&gt;
  &lt;li&gt;effective-pom-failed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For custom commands you may provide your own event name, with the assumption that ‘-failed’ will be automatically added in the event of a failure.&lt;/p&gt;

&lt;p&gt;You may use the &lt;code&gt;registerEvent&lt;/code&gt; function to bind a callback to an event.&lt;/p&gt;

&lt;p&gt;Function Parameters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The event name to bind a callback to.&lt;/li&gt;
  &lt;li&gt;The callback to bind to the event.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn.registerEvent('my-custom-event', () =&amp;gt; {
  console.log('My Custom Maven command was successful! :)')
});

mvn.registerEvent('my-custom-event-failed', () =&amp;gt; {
  console.error('My Custom Maven command Failed... :(')
});

mvn.execCommand('my-custom-event', 'clean install');
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="npm" /><category term="javascript" /><category term="js" /><category term="node" /><category term="nodejs" /><category term="projects" /><summary type="html">Run Maven commands via a Node JS API!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22nodejs.jpg%22%7D" /></entry><entry><title type="html">atom-maven</title><link href="http://localhost:4000/blog/2017/09/28/atom-maven/" rel="alternate" type="text/html" title="atom-maven" /><published>2017-09-28T23:45:00+01:00</published><updated>2017-09-28T23:45:00+01:00</updated><id>http://localhost:4000/blog/2017/09/28/atom-maven</id><content type="html" xml:base="http://localhost:4000/blog/2017/09/28/atom-maven/">&lt;p&gt;Maven integration for atom!&lt;/p&gt;

&lt;p&gt;Generates module specific .classpath files based on the Maven pom files in your Atom workspace.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Feature&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Configures the classpath for every Maven module in your workspace.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Complete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Automatically update the classpath when you update your pom files.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Complete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Build the Maven projects in the workspace on save.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Complete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Build the Maven project via user interaction with the UI.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Complete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Notification when your classpath has been configured.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Complete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Notification when a duplicate dependency definition has been identified.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TODO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Notification when a dependency does not exist.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Complete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Link to the location of erroneous dependencies.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Progress&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Identify when a new pom file is added into the workspace and bind the change event to it.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TODO&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/12021575/15692408/12018824-2786-11e6-8cac-289fd0af4076.JPG&quot; alt=&quot;310516&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;using-the-ui-features&quot;&gt;Using the UI Features&lt;/h3&gt;
&lt;p&gt;There are two method of using atom-maven from the UI; from the Packages menu, and from the command palette.&lt;/p&gt;

&lt;h4 id=&quot;packages-menu&quot;&gt;Packages menu&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/12021575/25781403/bba6e132-3331-11e7-9596-b6bd74812bd9.PNG&quot; alt=&quot;packages-menu&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;command-palette&quot;&gt;Command Palette&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/12021575/25781396/ab10a45c-3331-11e7-8131-06fcd1f0c132.PNG&quot; alt=&quot;command-palette&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h2&gt;

&lt;p&gt;The notification which informs you that a dependency doesn’t exist always points to line 0.&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;It is required that Apache Maven is correctly installed on your computer and is ready to use on the command line.&lt;/p&gt;

&lt;p&gt;Please see the Maven website for &lt;a href=&quot;http://maven.apache.org/install.html&quot;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Configuration Key&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Required / Optional&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Classpath File Name&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Optional&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The name of the file to write your classpath to in your Maven module.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Generate Classpaths On Startup&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Optional&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Build all maven pom files on Atom start up and create classpaths for each.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Generate Classpaths On Save&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Optional&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Watch maven pom files for save events and create classpath when the pom changes.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;whats-new&quot;&gt;What’s new?&lt;/h2&gt;
&lt;p&gt;Checkout the &lt;a href=&quot;https://github.com/concon121/atom-maven/blob/master/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt; for the full list of recently implemented features and bug fixes.&lt;/p&gt;

&lt;h2 id=&quot;backlog-and-issues&quot;&gt;Backlog and Issues&lt;/h2&gt;
&lt;p&gt;The complete list of features which needs to be implemented, future enhancements, known issues and bugs can be found on the atom-maven GitHub repository &lt;a href=&quot;https://github.com/concon121/atom-maven/issues&quot;&gt;issues page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Contributions are always welcome, there is still a lot of work to be done!  Feel free to pick up an issue in the backlog and open a pull request to get the conversation going.  I am more than happy to provide help and direction, and very welcoming of advice and suggestions.&lt;/p&gt;

&lt;h2 id=&quot;raising-issues&quot;&gt;Raising Issues&lt;/h2&gt;

&lt;p&gt;If atom-maven is not resolving your classpath correctly, it is really useful for debugging purposes if you could provide sample pom files which I can use to reproduce your issue.&lt;/p&gt;

&lt;h2 id=&quot;what-can-i-use-atom-maven-for&quot;&gt;What can I use atom-maven for?&lt;/h2&gt;

&lt;p&gt;I started developing atom-maven as I wanted to be able to write my Java code in Atom.  There are a couple of packages I found which make this easier, but they depend on a .classpath file being configured.  As a user of Maven, Maven configures your classpath and makes sure all your dependencies are available when you need them to be.  The atom-maven package replicates this functionality and generates the .classpath file other Atom Java packages need, based on your Maven pom files!&lt;/p&gt;

&lt;h3 id=&quot;useful-java-packages&quot;&gt;Useful Java Packages&lt;/h3&gt;

&lt;p&gt;The below atom packages work well with atom-maven:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-java&quot;&gt;autocomplete-java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/linter-javac&quot;&gt;linter-javac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;autocomplete-java&quot;&gt;autocomplete-java&lt;/h4&gt;
&lt;p&gt;Capable of reading the generated .classpath file, this package provides functionlity to organise imports, complete packages and classes, examine methods etc…&lt;/p&gt;

&lt;p&gt;Note. git ignored .classpath files are not discovered.&lt;/p&gt;

&lt;h4 id=&quot;linter-javac&quot;&gt;linter-javac&lt;/h4&gt;
&lt;p&gt;Capable of reading the generated .classpath file, this package will attempt to compile your .java files and show you all the compile time problems with your code.&lt;/p&gt;

&lt;h2 id=&quot;kudos&quot;&gt;Kudos&lt;/h2&gt;
&lt;p&gt;Kudos to the following, for making my life easier!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/node-maven-api&quot;&gt;node-maven-api&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tcarlsen/atom-message-panel&quot;&gt;atom-message-panel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Leonidas-from-XIV/node-xml2js&quot;&gt;xml2js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="atom" /><category term="apache" /><category term="maven" /><category term="javascript" /><category term="js" /><category term="node" /><category term="nodejs" /><category term="projects" /><summary type="html">Maven integration for Atom!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22atom-mark.png%22%7D" /></entry><entry><title type="html">What is atom-maven?</title><link href="http://localhost:4000/blog/2016/10/14/what-is-atom-maven/" rel="alternate" type="text/html" title="What is atom-maven?" /><published>2016-10-14T21:39:00+01:00</published><updated>2016-10-14T21:39:00+01:00</updated><id>http://localhost:4000/blog/2016/10/14/what-is-atom-maven</id><content type="html" xml:base="http://localhost:4000/blog/2016/10/14/what-is-atom-maven/">&lt;p&gt;So it seemed appropriate for my first attempt at my first blog post to write about my first ever so slightly semi not unsuccessful open source project - &lt;a href=&quot;https://atom.io/packages/atom-maven&quot;&gt;atom-maven&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Earlier this year, I fell in love with &lt;a href=&quot;https://atom.io&quot;&gt;atom&lt;/a&gt;, the new (ish) text editor developed by GitHub.  Its marketed as a “hackable text editor for the 21st century”, and it really lives up to that claim allowing you to customise it to your hearts content and extends its functionality via custom plugins (if you want to be proper about it, they’re called packages).&lt;/p&gt;

&lt;p&gt;Atom’s community is pretty huge and growing.  At the time of writing there are 5074 plugins available to download, and even more custom themes so that you can modify how the UI looks.  Atom is built using [electron][electron] which uses the Google Chrome V8 engine. Buzz words aside, this means that atom is a desktop Node JS app, with a HTML and JavaScript UI with all the developer tools of the Chrome web browser.  Pressing &lt;code&gt;ctrl + alt + i&lt;/code&gt; to open the developer console, you can immediately start throwing down the jQuery and playing with the UI.  As atom is a Node JS app, you also have access to all the Node API’s right there in the developer console, as well as the API’s which atom its self exposes.&lt;/p&gt;

&lt;p&gt;Once I quit screwing with atom and trying to break it, I got down to business and started looking into how I could really optimise my work stream using the flexibility and customisability that atom affords me.  At the time when I started using atom, I was doing a lot of front end UI HTML and JavaScript work, so of course I hunted down every and all plugins which would make my life easier in that respect.  There are code formatters (&lt;a href=&quot;https://atom.io/packages/atom-beautify&quot;&gt;atom-beautify&lt;/a&gt;) and linters (&lt;a href=&quot;https://atom.io/packages/linter-eslint&quot;&gt;linter-eslint&lt;/a&gt;) galore, there’s even a sexy little plugin called &lt;a href=&quot;https://atom.io/packages/vim-mode&quot;&gt;vim-mode&lt;/a&gt; (and &lt;a href=&quot;https://atom.io/packages/ex-mode&quot;&gt;ex-mode&lt;/a&gt;) which give you vim short cuts in your text editor!  I was literally in developer Nirvana!&lt;/p&gt;

&lt;p&gt;Unfortunately the day came when I had to switch back from JavaScript to good old Java, and switch back to my slow, clunky, memory sucking Eclipse IDE.  Don’t get me wrong, I like Eclipse.  It’s got a lot of really cool features that I couldn’t do without.  Some days though, I just want to throw it through a window.  If you’ve ever used Eclipse, you’ve probably had one of those moments where you’re sat there thinking, “Why are you spending 10 minutes building the ENTIRE workspace, when all I asked you to do was open this poxy little file…”.  It was one of these moments which ultimately sparked my quest to turn my simple atom text editor into a fully fledged Java IDE.&lt;/p&gt;

&lt;p&gt;First things first, what plugins had other people already created which would aid me in my noble quest?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/linter-javac&quot;&gt;linter-javac&lt;/a&gt; - Even the best developers make mistakes.  Eclipse, as well as pretty much every other IDE has the functionality to point out things that will result in compilation errors.  linter-javac does just this.  It basically uses the javac installed on your system which comes with your JDK to compile your code in the background when you save your work.  If it detects a problem, it will display a red error mark on the screen to notify you.  Lovely.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-java&quot;&gt;autocomplete-java&lt;/a&gt; - Another feature that every good IDE has, I know it as the more colloquial term “intellesence”, which I believe was coined by Microsoft for their Visual Studio product.  But don’t quote me on that.  It simply shows you a little drop down as you’re typing, suggesting completions for the things you could be typing.  This may include completing the name of a variable, displaying the list of available methods in a class, displaying classes on the classpath with a name similar to what you’ve started typing etc… I find this one really useful for exploring API’s I’m fairly unfamiliar with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me, these two plugins covered the basics, the features I felt were missing that atom did not already provide out of the box, and the features that I really wanted in an IDE.  I’m a bit of a command line geek, so there’s a lot of stuff IDE’s do, for example git integration (which atom does a whole lot better by the way) or building my code, which I just prefer to just do on the command line or write scripts to do.&lt;/p&gt;

&lt;p&gt;Conceptually the two plugins I found are great, they provide exactly the functionality that I wanted.  There’s just one catch.  Both of these plugins require a .classpath file to have been configured in the root folder of your project to tell them what third party dependencies that your project uses and can compile against.  The .classpath file is simply a semi-colon separated list of file paths to jar files that your project needs.  At first glance, it seems pretty easy to throw one of these file together manually and maintain it manually, but the further down the rabbit hole you go you begin to remember that your dependencies have dependencies, and their dependencies have dependencies, and so on… As an avid Apache Maven user I’m quite used to M2E bridging the gap between Eclipse and Maven, sorting out my classpath woes for me automatically.  It occurred to me that I needed an M2E for atom, and thus lacking any pre-existing atom packages for Apache Maven, &lt;a href=&quot;https://atom.io/packages/atom-maven&quot;&gt;atom-maven&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;The aim of &lt;a href=&quot;https://atom.io/packages/atom-maven&quot;&gt;atom-maven&lt;/a&gt; is to do for atom what M2E does for eclipse.  Shamelessly stolen from the &lt;a href=&quot;http://www.eclipse.org/m2e/&quot;&gt;M2E website&lt;/a&gt;, the features it provides are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Launching Maven builds from within Eclipse&lt;/li&gt;
  &lt;li&gt;Dependency management for Eclipse build path based on Maven’s pom.xml&lt;/li&gt;
  &lt;li&gt;Resolving Maven dependencies from the Eclipse workspace without installing to local Maven repository&lt;/li&gt;
  &lt;li&gt;Automatic downloading of the required dependencies from the remote Maven repositories&lt;/li&gt;
  &lt;li&gt;Wizards for creating new Maven projects, pom.xml and to enable Maven support on plain Java project&lt;/li&gt;
  &lt;li&gt;Quick search for dependencies in Maven remote repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good amount of work has been put into atom-mavens dependency resolution and mediation mechanisms so that a .classpath file can be created efficiently and with a high degree of accuracy.  This aspect of atom-maven works very well, however there are certain features missing so you don’t quite get the complete Maven experience just yet.  I really want to nail down the dependency resolution features before I move on to the more “nice to haves” and UI oriented features, like kicking off a build.  Like I said, I’m a command line geek, these are fairly low priority for me.&lt;/p&gt;

&lt;p&gt;In the coming weeks, I will endeavour to write posts explaining some of the things I learnt creating atom-maven, some of the challenges that I faced and hopefully knock out a few more features while I’m at it.&lt;/p&gt;

&lt;p&gt;Happy Coding and Good Night!&lt;/p&gt;</content><author><name></name></author><category term="atom" /><category term="apache" /><category term="maven" /><category term="javascript" /><category term="js" /><category term="node" /><category term="nodejs" /><category term="blog" /><category term="whatis" /><summary type="html">atom-maven is a plugin for the popular text editor atom.io which attempts to add support for Apache Maven.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22apache_maven.jpg%22%7D" /></entry></feed>